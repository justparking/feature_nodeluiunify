'''A short description of your Node goes here which appears in the web interface'''


# This is an example Nodel script, auto-generated by Node Host v%VERSION%.

# Some information about your recipe can be put here.
# Link to manual - https://link.to.manual

# You can refer to the Scripting Toolkit Reference by clicking on the 
# Nodel logo twice and following the link


# <!-- parameters

param_disabled = Parameter({'desc': 'Disables this node', 'schema': {'type': 'boolean'}})

param_ipAddress = Parameter({ 'title': 'IP Address', # NOTE: use 'title' to provide a friendlier name
                              'schema': {'type': 'string' }})

DEFAULT_PORT = 9999
param_port = Parameter({'schema': {'type': 'integer', 'hint': DEFAULT_PORT}})

# -->


# <!-- main entry-point

def main():
  console.info("Recipe has started!")

# -->


# <!-- example local actions and events/signals and timer

local_event_Clock = LocalEvent({'group': 'Examples', 'schema': {'type': 'string'}})

def clock_callback():
  local_event_Clock.emit(str(date_now()))

clock_timer = Timer(clock_callback, 1) # an example timer


def local_action_PrintTodayWithMsg(arg): # actions can be created declaratively
  '''{'title': 'Print Today (with message)', 'group': 'Examples', 'schema': {'type': 'string'}}'''
  console.info('Message is "%s", date is %s' % (arg, date_now()))


# this action is created using a function decorator
@local_action({'group': 'Examples', 'schema': {'type': 'integer', 'format': 'range', 'min':0, 'max':100}})
def volume(arg):
  remote_action_NodeXVolume.call(arg)

@local_action({'group': 'Examples', 'schema': {'type': 'string', 'enum': ['On', 'Off']}})
def power(arg):
  console.info('Power requested [%s], will call remote action too' % arg)

# -->


# <!-- example remote actions and events/signals

remote_action_NodeXVolume = RemoteAction({'schema': {'type': 'integer', 'format': 'range', 'min':0, 'max':100}})

def remote_event_NodeXStatus(arg): # created declaratively
  console.info('Got remote status: [%s]' % arg)

# -->



# <!-- TCP: this section demonstrates some TCP functions

def tcp_connected():
  log(0, 'TCP connected')

def tcp_disconnected():
  log(0, 'TCP disconnected')

def tcp_timeout():
  log(0, 'TCP disconnected')

def tcp_sent(data):
  log(1, "tcp_sent [%s]" % data)

def tcp_received(data):
  log(1, "tcp_received [%s]" % data)

tcp = TCP(connected=tcp_connected, 
          disconnected=tcp_disconnected, 
          sent=tcp_sent,
          received=tcp_received,
          timeout=tcp_timeout, 
          sendDelimiters='\n', 
          receiveDelimiters='\r\n')
                               
@after_main # another main entry-point
def setup_tcp():
  if param_disabled:
    console.warn('Node is disabled; will not connect TCP')
    return
  
  if not param_ipAddress:
    console.warn('IP address has not been specified')
    return

  dest = '%s:%s' % (param_ipAddress, param_port or DEFAULT_PORT)

  console.info('Will connect to TCP %s' % dest)

  tcp.setDest(dest)

# <!-- logging

local_event_LogLevel = LocalEvent({'group': 'Debug', 'order': 10000+next_seq(), 'desc': 'Use this to ramp up the logging (with indentation)',  
                                   'schema': {'type': 'integer'}})

def warn(level, msg):
  if local_event_LogLevel.getArg() >= level:
    console.warn(('  ' * level) + msg)

def log(level, msg):
  if local_event_LogLevel.getArg() >= level:
    console.log(('  ' * level) + msg)

# --!>
