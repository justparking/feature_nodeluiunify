apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

import org.apache.tools.ant.filters.ReplaceTokens
import org.joda.time.DateTime;

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'joda-time:joda-time:2.6'
    }
}

def hostname = InetAddress.getLocalHost().getHostName().toUpperCase();

def now = DateTime.now().toString();

task gitBranch(type:Exec) {
  commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
  standardOutput = new ByteArrayOutputStream()
  ext.output = {
    return standardOutput.toString().trim()
  }
}

task gitId(type:Exec) {
  commandLine 'git', 'rev-parse', 'HEAD'
  standardOutput = new ByteArrayOutputStream()
  ext.output = {
    return standardOutput.toString().trim()
  }
}

task gitRev(type:Exec) {
    commandLine 'git', 'rev-list', '--count', 'HEAD'
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString().trim()
    }
}

gitBranch.execute()
gitRev.execute()
gitId.execute()

def branch = gitBranch.output()
if (branch.equals("master"))
    branch = "dev"

def rev = gitRev.output()
// strip out non-alphanumeric (e.g. the '+' in '1234+')
rev = rev.replaceAll(/[^a-zA-Z0-9]/, '')

def buildSummary = gitId.output();

if (!branch.equals("stable"))
    version project.version + "-" + branch + "_r" + rev

task grunt(type:Exec) {  
  if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows'))
    commandLine 'grunt.cmd'
  else
    commandLine 'grunt'
} 

task copyContent(type: Copy) {
    from new File(project.buildDir, 'grunt')
    into new File(project.buildDir, 'www-content_stage')
    exclude 'build.json'
}

task filterContentTemplates(type: Copy) {
    from 'src'
    into new File(project.buildDir, 'www-content_stage')
    include 'build.json' 
    filter(ReplaceTokens, tokens: [ 
        buildSummary: project.name + "-" + project.version + " " + buildSummary + " (" + hostname + ") " + now,
        buildProject: project.name,
        buildBranch: branch,
        buildVersion: project.version,
        buildId: buildSummary,
        buildRev: rev,
        buildHost: hostname,
        buildDate: now
    ])
}

task zipContentInterface(type: Zip, dependsOn: [copyContent, filterContentTemplates]) {
    from new File(project.buildDir, 'www-content_stage')
    archiveName 'content.zip'
    destinationDir new File(project.buildDir, 'www-content/org/nodel/host')
}

task copyBuildInfo(type: Copy, dependsOn: [copyContent, filterContentTemplates]) {
    from new File(project.buildDir, 'www-content_stage')
    include 'build.json'
    destinationDir new File(project.buildDir, 'www-content/org/nodel')
}

sourceSets {
    main {
        resources.srcDir new File(project.buildDir, 'www-content')
    }
}

task preBuild << {
    tasks.cleanFilterContentTemplates.execute()
    tasks.cleanZipContentInterface.execute()
    tasks.cleanCopyContent.execute()

    tasks.grunt.execute()

    tasks.copyContent.execute()
    tasks.filterContentTemplates.execute()
    tasks.zipContentInterface.execute()

    tasks.copyBuildInfo.execute()
}

compileJava.dependsOn(preBuild)

dependencies {
    compile 'joda-time:joda-time:2.6'
    compile 'org.joda:joda-convert:1.7'
}

